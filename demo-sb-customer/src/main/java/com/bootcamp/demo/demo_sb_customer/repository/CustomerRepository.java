package com.bootcamp.demo.demo_sb_customer.repository;

import java.util.List;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import com.bootcamp.demo.demo_sb_customer.entity.CustomerEntity;

// JPA + Driver (Postgresql)
// ! Hibernate generates the implementation class, which implements "CustomerRepository"
@Repository // bean
public interface CustomerRepository
    extends JpaRepository<CustomerEntity, Long> {
  // ! During maven compilation, the implementation class is generated by Hibernate
  // save()
  // saveAll()
  // findAll()
  // findById()
  // deleteById()
  // .. etc

  // ! JPA Method
  // controller -> service ->
  // how about return List?
  List<CustomerEntity> findByName(String name);

  // Support both and & or
  List<CustomerEntity> findByNameAndEmail(String name, String email);

  // Practice: Date Format

  // ! JPQL (Entity), CustomerEntity exactly same as the Entity class name
  @Query(value = "select c from CustomerEntity c where c.name = :name",
      nativeQuery = false)
  List<CustomerEntity> findByNameByJPQL(@Param("name") String customerName);

  // ! Native Query (Normal SQL)
  @Query(value = "select c.* from customers c where c.customer_name = :name",
      nativeQuery = true)
  List<CustomerEntity> findByNameByNativeQuery(
      @Param("name") String customerName);
}
